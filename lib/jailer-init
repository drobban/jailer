#!/bin/sh

init::thankyou(){
  printf "\n"
  printf "Please report any problems at https://github.com/illuria/jailer/issues\n"
  printf "The latest information about Jailer is available at https://jailer.dev/\n"
  printf "Consider joining Jailer's worldwide community:\n"
  printf " https://github.com/illuria/jailer\n"
  printf "\n"
  printf "Thank you for choosing Jailer!\n"
}

init::suggest(){
  printf "\n"
  printf "${COLOUR_SET_Y}You may run \`${progname} init info\` to check system status\n"
  printf "You may run \`${progname} init bridge\` to setup advanced networking${COLOUR_END}\n"
}

init::zfs::info(){
  printf "${COLOUR_SET_B}Jailer will create\n"
  printf "${COLOUR_SET_M} dataset     :${COLOUR_SET_C} $_dataset\n"
  printf "${COLOUR_SET_M} mount point :${COLOUR_SET_C} ${_mpoint:-unknown}${COLOUR_END}\n"
}

init::zfs::execute(){
  printf "${COLOUR_SET_B}Creating ZFS dataset "
  printf "${COLOUR_SET_C}$_dataset ${COLOUR_SET_B}"
  printf "with the mount point ${COLOUR_SET_C}${_mpoint:-unknown}${COLOUR_END}: "

  if ! eval "${_zcmd}" > /dev/null 2>&1 ; then
    printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
    util::err "Run this command to figure out why ZFS failed:\n $_zcmd"
  else
    printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
    # Initialise the world (main section, if reached)
    printf "${COLOUR_SET_B}Setting jailer_dir in rc.conf${COLOUR_END}: "
    sysrc jailer_dir="zfs:$_dataset" > /dev/null 2>&1
    [ $? -eq 0 ] && printf "${COLOUR_SET_G}Done!${COLOUR_END}\n" \
      || printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
  fi
}

init::zfs::parse(){
  # Infer pool name
  _zpool_no="$(zpool list -H -o name | wc -l)"
  if [ "$_zpool_no" -eq 0 ]; then
    util::err "No ZFS pool found"
  elif [ -n "$_zpool" ] || [ -n "$_dataset" ]; then
    :
  elif [ "$_zpool_no" -ne 1 ]; then
    util::err "Could not infer pool name, use either '-z pool' or '-d pool/dataset'"
  else
    set -- ${_zpool:=$(zpool list -H -o name)}
  fi

  # If _nodef (no default) is not provided, set default values for those
  # not passed by the user
  ${_nodef:=false} # Assume false if -n is not used
  if ! $_nodef; then
    set -- ${_dataset:="$_zpool/jails"}
    set -- ${_mpoint:="/usr/local/jails"}
  fi

  [ ! $_dataset ] && util::err "ZFS dataset cannot be empty, use '-d pool/dataset'"

  : ${opt_d:=false}
  : ${opt_z:=false}
  if $opt_z && $opt_d; then
    util::err "Only one of -z or -d can be provided"
  fi

  if [ $_mpoint ]; then
    _zcmd="zfs create -o mountpoint=$_mpoint $_dataset"
  else
    _zcmd="zfs create $_dataset"
  fi
}

init::zfs(){
  ${_yes:=false}
  if ! ${_yes}; then
    init::zfs::info
    read -p "OK? (y/N) " _yes
    if [ "${_yes}" = "y" -o "${_yes}" = "yes" ]; then
      init::zfs::execute
    else
      exit 0
    fi
  else
    init::zfs::execute
  fi
}

init::info(){
  printf "${COLOUR_SET_B}Checking system state...${COLOUR_END}\n"
  printf "${COLOUR_SET_M} jail_enable in rc.conf  ==> ${COLOUR_END}"
  if checkyesno "jail_enable" ; then
    printf "${COLOUR_SET_C}YES!${COLOUR_END}\n"
    printf "${COLOUR_SET_M} patched rc.d/jail file  ==> ${COLOUR_END}"
    if [ ! "${VERSION_BSD}" -lt 1400000 ] ; then
      printf "${COLOUR_SET_C}No need!${COLOUR_END}\n"
    else
      if grep -q "jail_conf_dir" /etc/rc.d/jail ; then
        printf "${COLOUR_SET_C}YES!${COLOUR_END}\n"
      else
        printf "${COLOUR_SET_R}NO :(${COLOUR_END}\n"
      fi
    fi
    printf "${COLOUR_SET_B}Checking jailer state...${COLOUR_END}\n"
    printf "${COLOUR_SET_M} jailer_dir in rc.conf   ==> ${COLOUR_END}"
    if [ ! -z $_rcval ]; then
      zfs::init
      printf "${COLOUR_SET_C}YES!${COLOUR_END}\n"
      printf "${COLOUR_SET_M} jailer_dir is define to ==> ${COLOUR_END}"
      printf "${COLOUR_SET_C}${_rcval}${COLOUR_END}\n"

      printf "${COLOUR_SET_M} Jailer ZFS dataset      ==> ${COLOUR_END}"
      printf "${COLOUR_SET_C}${JAILER_ZFS_DATASET}${COLOUR_END}\n"
      printf "${COLOUR_SET_M} Jailer ZFS mountpoint   ==> ${COLOUR_END}"
      printf "${COLOUR_SET_C}${jailer_dir}${COLOUR_END}\n"
    else
      printf "${COLOUR_SET_R}NO :(${COLOUR_END}\n"
    fi
    printf "${COLOUR_SET_B}Checking network status...${COLOUR_END}\n"
    printf "${COLOUR_SET_M} bridge0 in rc.conf      ==> ${COLOUR_END}"
    if (sysrc -n cloned_interfaces | tr ' ' '\n' | grep -q '^bridge0$') ; then
      printf "${COLOUR_SET_C}YES!${COLOUR_END}\n"
      printf "${COLOUR_SET_M} bridge0 is interfaces   ==> ${COLOUR_END}"
      if ifconfig bridge0 1>/dev/null 2>&1 ; then
        printf "${COLOUR_SET_C}YES!${COLOUR_END}\n"
        printf "${COLOUR_SET_M} bridge0 uses IP address ==> ${COLOUR_END}"
        _bridge0ip=$(ifconfig bridge0 | awk '/inet / {print $2; exit}')
        if [ ! -z "${_bridge0ip}" ]; then
          printf "${COLOUR_SET_C}${_bridge0ip}${COLOUR_END}\n"
        else
          printf "${COLOUR_SET_R}NO :(${COLOUR_END}\n"
        fi
      else
        printf "${COLOUR_SET_R}NO :(${COLOUR_END}\n"
        printf "${COLOUR_SET_Y}  Run \`service netif start bridge0\` to start the bridge${COLOUR_END}\n"
      fi
    else
      printf "${COLOUR_SET_R}NO :(${COLOUR_END}\n"
      printf "${COLOUR_SET_Y}  If you want Jailer to auto-configure bridge interfaces, run \`jailer init bridge\`${COLOUR_END}\n"
    fi
  else
    printf "${COLOUR_SET_R}NO :(${COLOUR_END}\n"
  fi
}

init::jailconf(){
  [ "${VERSION_BSD}" -lt 1400000 ] && printf "Requires FreeBSD 14.0-RELEASE or later\n" && exit
  printf "${COLOUR_SET_B}Configuring ${COLOUR_SET_C}/etc/jail.conf${COLOUR_END}: "
  if ! fgrep -q '.include "/etc/jail.conf.d/*.conf" ;' /etc/jail.conf 2> /dev/null;
  then
    echo '.include "/etc/jail.conf.d/*.conf" ;' >> /etc/jail.conf
    if [ $? -eq 0 ]; then
      printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
    else
      printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
      util::warn "Could not configure /etc/jail.conf, you need to take care of it manually"
    fi
  else
      printf "${COLOUR_SET_G}No need!${COLOUR_END}\n"
  fi
}

init::patch(){
  [ ! "${VERSION_BSD}" -lt 1400000 ] && printf "Running FreeBSD ${VERSION_BSD}: No need for patching!\n" && exit
  # Apply illuria's patches
  grep "jail_conf_dir" /etc/rc.d/jail >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    printf "${COLOUR_SET_B}Patching jail service for jail.conf.d support${COLOUR_END}: "
    cp /etc/rc.d/jail /etc/rc.d/jail.origin && cp ${LIB}/init/jail /etc/rc.d/jail
    if [ $? -eq 0 ]; then
      printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
    else
      printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
      util::warn "Could not patch rc.d/jail, you need to take care of it manually"
    fi
  fi
}

init::bridge::info(){
  printf "${COLOUR_SET_B}Jailer will configure\n"
  printf "${COLOUR_SET_M} network interface :${COLOUR_SET_C} ${_bridge}\n"
  printf "${COLOUR_SET_M} network address   :${COLOUR_SET_C} ${_addr}${COLOUR_END}\n"
}

init::bridge::execute(){
  _bcmd=$(cat <<EOF
  sysrc cloned_interfaces+="${_bridge}" && \
  sysrc ifconfig_${_bridge}="inet ${_addr} up" && \
  service netif start ${_bridge}
EOF
)
  printf "${COLOUR_SET_B}Configuring interface ${COLOUR_SET_C}${_bridge} "
  printf "${COLOUR_SET_B}with IP address ${COLOUR_SET_C}${_addr}${COLOUR_END}: "
  if eval "${_bcmd}" > /dev/null 2>&1 ; then
    printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
    printf "${COLOUR_SET_Y}\nYou may run \`${progname} init dhcp -b ${_bridge}\` to setup DHCP server for ${_bridge}${COLOUR_END}\n"
  else
    printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
    util::err "Run this command to figure out why network config failed:\n $_bcmd"
  fi
}

init::bridge(){
  _bridge='bridge0'
  _addr="10.0.0.1/24"

  shift
  while getopts b:a: _opt; do
    case ${_opt} in
      b)  _bridge="${OPTARG}" ;;
      a)  _addr="${OPTARG}"   ;;
    esac
  done

  ${_yes:=false}
  if ! ${_yes}; then
    init::bridge::info
    read -p "OK? (y/N) " _yes
    if [ "${_yes}" = "y" -o "${_yes}" = "yes" ]; then
      init::bridge::execute
    else
      exit 0
    fi
  else
    init::bridge::execute
  fi
}

init::dhcp::info(){
  printf "${COLOUR_SET_B}Jailer will\n"
  printf "${COLOUR_SET_M} - Install OpenBSD's ${COLOUR_SET_C}dhcpd${COLOUR_SET_M} from packages.\n"
  printf "${COLOUR_SET_M} - Setup ${COLOUR_SET_C}dhcpd.conf${COLOUR_SET_M}.\n"
  printf "${COLOUR_SET_M}   - With the range ${COLOUR_SET_C}${_range}${COLOUR_SET_M}.\n"
  printf "${COLOUR_SET_M} - Create ${COLOUR_SET_C}/etc/devfs.rules${COLOUR_SET_M} for VNET Jails.\n"
  printf "${COLOUR_END}"
}

init::dhcp::execute(){
  _confpath="/usr/local/etc/dhcpd.conf"
  _conf=$(cat <<EOF
subnet ${subnet} netmask ${netmask} {
  range ${_rangeconf};
  option subnet-mask ${netmask};
  option routers ${braddr};
}
EOF
)

  _devfsrules=$(cat <<EOF
[vnet=10]
add path 'bpf*' unhide
EOF
)

  _dhcpdinstall=$(cat <<EOF
pkg install -y dhcpd
EOF
)

  _dhcpdconf=$(cat <<EOF
printf "\n${_conf}\n" > ${_confpath}
EOF
)

  _dhcpdtestrun=$(cat <<EOF
dhcpd -n -f ${_confpath} && service dhcpd enable && service dhcpd start
EOF
)

  _devfsrulesadd=$(cat <<EOF
printf "\n${_devfsrules}\n" >> /etc/devfs.rules
EOF
)


  printf "${COLOUR_SET_B}Installing ${COLOUR_SET_C}dhcpd${COLOUR_END}: "
  if eval "${_dhcpdinstall}" >/dev/null 2>&1 ; then
    printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
  else
    printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
    util::err "Run this command to figure out why this failed:\n $_dhcpdinstall \n"
  fi

  printf "${COLOUR_SET_B}Setting up ${COLOUR_SET_C}dhcpd.conf${COLOUR_END}: "
  if eval "${_dhcpdconf}" >/dev/null 2>&1 ; then
    printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
  else
    printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
    util::err "Run this command to figure out why this failed:\n $_dhcpdconf \n"
  fi

  printf "${COLOUR_SET_B}Enabling ${COLOUR_SET_C}dhcpd.conf${COLOUR_END}: "
  if eval "${_dhcpdtestrun}" >/dev/null 2>&1 ; then
    printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
  else
    printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
    util::err "Run this command to figure out why this failed:\n $_dhcpdtestrun \n"
  fi

  printf "${COLOUR_SET_B}Setting up ${COLOUR_SET_C}devfs.rules${COLOUR_END}: "
  if eval "${_devfsrulesadd}" >/dev/null 2>&1 ; then
    printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
  else
    printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
    util::err "Run this command to figure out why this failed:\n $_devfsrulesadd \n"
  fi
}

init::dhcp(){
  _bridge="bridge0"

  shift
  while getopts b:r: _opt; do
    case ${_opt} in
      b)  _bridge="${OPTARG}" ;;
      r)  _range="${OPTARG}"  ;;
    esac
  done

  # Need to calculate the subnet and netmask for DHCP
  braddr="$(ifconfig -f inet:dotted ${_bridge} inet | grep 'inet ' | cut -w -f 3)"
  braddrhead=$(echo ${braddr} | cut -d . -f -3)
  braddrtail=$(echo ${braddr} | cut -d . -f 4)
  rangefirst=$(printf "%s.%s" ${braddrhead} $(expr ${braddrtail} + 1))

  subnet=$(printf "%s.%s" ${braddrhead} $(expr ${braddrtail} - 1))
  netmask="$(ifconfig -f inet:dotted ${_bridge} inet | grep 'inet ' | cut -w -f 5)"

  # Calculate the DHCP pool range if the user didn't provide one
  if [ -z "${_range}" ];
  then
    brbrdc="$(ifconfig -f inet:dotted ${_bridge} inet | grep 'inet ' | cut -w -f 7)"
    brbrdchead=$(echo ${brbrdc} | cut -d . -f -3)
    brbrdctail=$(echo ${brbrdc} | cut -d . -f 4)
    rangelast=$(printf "%s.%s" ${brbrdchead} $(expr ${brbrdctail} - 1))

    _range="${rangefirst}-${rangelast}"
  fi

  _rangeconf=$(echo "${_range}" | tr '-' ' ')

  ${_yes:=false}
  if ! ${_yes}; then
    init::dhcp::info
    read -p "OK? (y/N) " _yes
    if [ "${_yes}" = "y" -o "${_yes}" = "yes" ]; then
      init::dhcp::execute
    else
      exit 0
    fi
  else
    init::dhcp::execute
  fi
}

init::init(){
  local _dataset _initialised _mpoint _nodef _rcval _zcmd _zpool _zpool_no
  local _yes

  ${_initialised:=false} # Assume uninitialized until proven
  _rcval=$(sysrc -nq jailer_dir)
  [ ${#_rcval} -ne 0 ] && _initialised=true

  shift
  while getopts d:m:nyz: _opt; do
    case ${_opt} in
      d)  _dataset="${OPTARG}" && opt_d=true ;;
      m)  _mpoint="${OPTARG}"                ;;
      n)  _nodef=true                        ;;
      y)  _yes=true                          ;;
      z)  _zpool="${OPTARG}"   && opt_z=true ;;
    esac
  done
  shift $((OPTIND - 1))

  _subcommand="${1}"

  [ ! "${_initialised}" = "true"      ] && init::zfs::parse
  [   "${_subcommand}"  = "zfs"       ] && init::zfs       && exit
  [   "${_subcommand}"  = "help"      ] && help::init      && exit
  [   "${_subcommand}"  = "info"      ] && init::info      && exit
  [   "${_subcommand}"  = "dhcp"      ] && init::dhcp   $@ && exit
  [   "${_subcommand}"  = "jailconf"  ] && init::jailconf  && exit
  [   "${_subcommand}"  = "patch"     ] && init::patch     && exit
  [   "${_subcommand}"  = "bridge"    ] && init::bridge $@ && exit


  # If jailer is initialised beforehand, inform the user and exit
  if $_initialised; then
    util::warn "Jailer seems to be already initialised (manually, perhaps?)"
    init::info
    exit 1
  fi

  init::zfs

  # Enable the jail service first
  printf "${COLOUR_SET_B}Enabling the jail service${COLOUR_END}: "
  service jail enable > /dev/null 2>&1
  [ $? -eq 0 ] && printf "${COLOUR_SET_G}Done!${COLOUR_END}\n" \
               || printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"

  if [ "${VERSION_BSD}" -lt 1400000 ]; then
    init::patch
  else
    init::jailconf
  fi

  init::suggest

  init::thankyou
  exit 0
}
