#!/bin/sh

#TODO redo this whole file in a more FreeBSD-style
CMD_VALID_LIST="create,console,deinit,destroy,edit,help,image,info,init,list,network,nat,rdr,snap,snapshot,start,startall,stop,stopall,usage,version"

cmd::parse_init(){
    local _cmd

    cmd::find "_cmd" "$1" "${CMD_VALID_LIST}"

    case "${_cmd}" in
        version) util::version   && exit ;;
        usage)   util::usage     && exit ;;
        init)    init::init "$@" && exit ;;
    esac
}

cmd::parse(){
    local _cmd

    # try to find a matching command
    cmd::find "_cmd" "$1" "${CMD_VALID_LIST}" || util::usage
    shift

    case "${_cmd}" in
        create)           jail::create     "$@"  ;;
        console)          jail::console    "$@"  ;;
        destroy)          jail::destroy    "$@"  ;;
        edit)             jail::edit       "$@"  ;;
        help)             help::parse_help "$@"  ;;
        image)            jail::image      "$@"  ;;
        info)             jail::info       "$@"  ;;
        list)             jail::list       "$@"  ;;
        network)          jail::network    "$@"  ;;
        nat)              net::nat_parse   "$@"  ;;
        rdr)              net::rdr_parse   "$@"  ;;
        snap|snapshot)    zfs::snapshot    "$@"  ;;
        start)            jail::start      "$@"  ;;
        startall)         service jail start     ;;
        stop)             jail::stop       "$@"  ;;
        stopall)          service jail stop      ;;
        *)                util::err "Unknown command '${_user_cmd}'. Please run 'jailer usage' for help" ;;
    esac
}

cmd::find(){
    local _var="$1"
    local _user_cmd="$2"
    local _valid="$3"
    local _opt _choice _found=""
    local IFS=","

    [ -n "${_user_cmd}" ] || util::usage

    for _opt in ${_valid}; do
        # exact match?
        if [ "${_user_cmd}" = "${_opt}" ]; then
            setvar "${_var}" "${_opt}"
            return 0
        fi

        if echo "${_opt}" | grep -iqs "^${_user_cmd}"; then
           [ -n "${_found}" ] && util::err "ambiguous command '${_user_cmd}'"

           _found=1
           _choice="${_opt}"
        fi
    done

    [ -z "${_found}" ] && return 1
    setvar "${_var}" "${_choice}"
}
